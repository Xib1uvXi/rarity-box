package contractlib

import (
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/assert"
	"os"
	"testing"
)

func TestNewCallerLib(t *testing.T) {
	pk := os.Getenv("FTMPK")
	if pk == "" {
		t.Skip("pk is empty")
	}

	client, err := ethclient.Dial("https://rpc.ftm.tools")
	assert.NoError(t, err)

	clib, err := BuildV1CallerLib(pk, client, false)
	assert.NoError(t, err)

	assert.NoError(t, clib.Adventure([]uint64{2062009, 2063971, 2222628}))
}

func TestNewCallerLib_Dungeon(t *testing.T) {
	pk := os.Getenv("FTMPK")
	if pk == "" {
		t.Skip("pk is empty")
	}

	client, err := ethclient.Dial("https://rpc.ftm.tools")
	assert.NoError(t, err)

	clib, err := BuildV1CallerLib(pk, client, false)
	assert.NoError(t, err)

	assert.NoError(t, clib.Dungeon([]uint64{}))
}

func TestCallerLib_needApproved(t *testing.T) {
	//ids := []uint64{3575281}
	ids := []uint64{}

	pk := os.Getenv("FTMPK")
	if pk == "" {
		t.Skip("pk is empty")
	}

	client, err := ethclient.Dial("https://rpc.ftm.tools")
	assert.NoError(t, err)

	clib, err := BuildV1CallerLib(pk, client, false)
	assert.NoError(t, err)

	tids := clib.convertUint2BigInt(ids)

	_, err = clib.needApproved(tids)
	//_, err = clib.name(tids)
	assert.NoError(t, err)
}